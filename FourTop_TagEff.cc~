#include "TStyle.h"
#include "TPaveText.h"

#include <cmath>
#include <fstream>
#include <sstream>
#include <sys/stat.h>
#include "TRandom3.h"
#include "TEfficiency.h"
#include "TGraphAsymmErrors.h"


//user code
#include "TopTreeProducer/interface/TRootRun.h"
#include "TopTreeProducer/interface/TRootEvent.h"
#include "TopTreeAnalysisBase/Selection/interface/SelectionTable.h"
#include "TopTreeAnalysisBase/Content/interface/AnalysisEnvironment.h"
#include "TopTreeAnalysisBase/Content/interface/Dataset.h"
#include "TopTreeAnalysisBase/Tools/interface/JetTools.h"
#include "TopTreeAnalysisBase/Tools/interface/PlottingTools.h"
#include "TopTreeAnalysisBase/Tools/interface/MultiSamplePlot.h"
#include "TopTreeAnalysisBase/Tools/interface/TTreeLoader.h"
#include "TopTreeAnalysisBase/Tools/interface/AnalysisEnvironmentLoader.h"
#include "TopTreeAnalysisBase/Reconstruction/interface/JetCorrectorParameters.h"
#include "TopTreeAnalysisBase/Reconstruction/interface/JetCorrectionUncertainty.h"
#include "TopTreeAnalysisBase/Reconstruction/interface/MakeBinning.h"
#include "TopTreeAnalysisBase/MCInformation/interface/LumiReWeighting.h"
#include "TopTreeAnalysisBase/Reconstruction/interface/MEzCalculator.h"
#include "TopTreeAnalysisBase/MCInformation/interface/JetPartonMatching.h"
//#include "TopTreeAnalysisBase/InclFourthGenSearch/interface/InclFourthGenSearchTools.h"
#include "TopTreeAnalysisBase/MCInformation/interface/ResolutionFit.h"

#include "TopTreeAnalysisBase/Tools/interface/JetCombiner.h"
#include "TopTreeAnalysisBase/Tools/interface/MVATrainer.h"
#include "TopTreeAnalysisBase/Tools/interface/MVAComputer.h"
#include "TopTreeAnalysisBase/Tools/interface/JetTools.h"


#include "TLorentzVector.h"
#include "TopTreeAnalysisBase/Reconstruction/interface/TTreeObservables.h"
//#include "interface/FourTopTree.h"
#include "../macros/Style.C"

using namespace std;
using namespace TopTree;
using namespace reweight;

float workingpointvalue = 0.679;

Int_t n_true_bjets = 0, n_tagged_true_bjets = 0, n_true_cjets = 0, n_tagged_true_cjets = 0, n_true_ljets = 0, n_tagged_true_ljets = 0;

string TreeFileName = "FourTopTree.root";

struct HighestCSVBtag{
    bool operator()( TRootJet* j1, TRootJet* j2 ) const{
    	return j1->btag_combinedSecondaryVertexBJetTags() > j2->btag_combinedSecondaryVertexBJetTags();
    }
};


/// Normal Plots (TH1F* and TH2F*)
map<string,TH1F*> histo1D;
map<string,TH2F*> histo2D;

/// MultiSamplePlot
map<string,MultiSamplePlot*> MSPlot;

/// MultiPadPlot
map<string,MultiSamplePlot*> MultiPadPlot;

//TGraphAsymmErrors
map<string,TGraphAsymmErrors*> tgraph;

bool match;

int main (int argc, char *argv[])
{

  clock_t start = clock();

cout << "*************************************************************" << endl;
cout << " Beginning of the program for the FourTop search ! "           << endl;
cout << "*************************************************************" << endl;

    //SetStyle if needed
setTDRStyle();

string postfix = "_MCStudy"; // to relabel the names of the output file

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// Configuration ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
string channelpostfix = "";
string xmlFileName = "";

bool Electron = true; // use Electron channel?
bool Muon = false; // use Muon channel?

if(Electron && Muon){
    cout << "  --> Using both Muon and Electron channel? Choose only one ( since different samples/skims are required)!" << endl;
	exit(1);
  }


  if(Muon){
	cout << " --> Using the Muon channel..." << endl;
	channelpostfix = "_Mu";
	xmlFileName = "config/test_mcstudy_mu.xml";
  }
  else if(Electron){
	cout << " --> Using the Electron channel..." << endl;
	channelpostfix = "_El";
	xmlFileName = "config/test_mcstudy_el.xml";
  }


const char *xmlfile = xmlFileName.c_str();
cout << "used config file: " << xmlfile << endl;    


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// AnalysisEnvironment
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AnalysisEnvironment anaEnv;
cout<<" - Loading environment ..."<<endl;
AnalysisEnvironmentLoader anaLoad(anaEnv,xmlfile);
int verbose = 2;//anaEnv.Verbose;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////// Load Datasets
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TTreeLoader treeLoader;
vector < Dataset* > datasets;
cout << " - Loading datasets ..." << endl;
treeLoader.LoadDatasets (datasets, xmlfile);
float Luminosity = 5343.64; //pb^-1??

bool Tprime = false; // If false, regular variables are used in MVA    

string MVAmethod = "Likelihood"; // MVAmethod to be used to get the good jet combi calculation (not for training! this is chosen in the jetcombiner class)

bool TrainMVA = true; // If false, the previously trained MVA will be used to calculate stuff
//JetCombiner* jetCombiner = new JetCombiner(TrainMVA, Luminosity, datasets, MVAmethod, Tprime);

    

int ndatasets = datasets.size() - 1 ;
cout << " - splitting TTBar dataset ..." << ndatasets   << endl;
vector<string> ttbar_filenames = datasets[ndatasets]->Filenames();
cout <<"ttbar filenames =  "<< ttbar_filenames[0] <<endl;

    
for (unsigned int d = 0; d < datasets.size (); d++)
  {
     cout <<"found sample with equivalent lumi "<<  datasets[d]->EquivalentLumi() <<endl;
     string dataSetName = datasets[d]->Name();
   if(dataSetName.find("Data")<=0 || dataSetName.find("data")<=0 || dataSetName.find("DATA")<=0)
	{
		  Luminosity = datasets[d]->EquivalentLumi();
		  cout <<"found DATA sample with equivalent lumi "<<  datasets[d]->EquivalentLumi() <<endl;
		  break;
	 }
  }
    cout << "Rescaling to an integrated luminosity of "<< Luminosity <<" pb^-1" << endl;

//Output ROOT file
string rootFileName ("FourTop"+postfix+channelpostfix+".root");
TFile *fout = new TFile (rootFileName.c_str(), "RECREATE");

//vector of objects
cout << " - Variable declaration ..." << endl;
vector < TRootVertex* >   vertex;
vector < TRootMuon* >     init_muons;
vector < TRootElectron* > init_electrons;
vector < TRootJet* >      init_jets;
vector < TRootMET* >      mets;

//Global variable
TRootEvent* event = 0;

  
////////////////////////////////////////////////////////////////////
////////////////// MultiSample plots  //////////////////////////////
////////////////////////////////////////////////////////////////////

MSPlot["DeltaR_ClosestTop"] = new MultiSamplePlot(datasets, "DeltaR_ClosestTop ", 40, -10,10 , "Delta R Closest_top");
    
////////////////////////////////////////////////////////////////////
////////////////// 1D histograms  //////////////////////////////////
////////////////////////////////////////////////////////////////////

    
    
    
    tgraph["e_b_TTJets"] = new TGraphAsymmErrors();
    tgraph["e_b_TTTT"] = new TGraphAsymmErrors();

    tgraph["e_c_TTJets"] = new TGraphAsymmErrors();
    tgraph["e_c_TTTT"] = new TGraphAsymmErrors();
    
    // need light efficiency in the following eta bins: 0-0.8, 0.8-1.6, 1.6-2.4 
    
    tgraph["e_l_TTJets_eta0-08"] = new TGraphAsymmErrors();
    tgraph["e_l_TTTT_eta0-08"] = new TGraphAsymmErrors();
    
    tgraph["e_l_TTJets_eta08-16"] = new TGraphAsymmErrors();
    tgraph["e_l_TTTT_eta08-16"] = new TGraphAsymmErrors();
    
    tgraph["e_l_TTJets_eta16-24"] = new TGraphAsymmErrors();
    tgraph["e_l_TTTT_eta16-24"] = new TGraphAsymmErrors();
    
    //float ptmin[] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600};
    //  float ptmax[] = {30, 40, 50, 60, 70, 80,100, 120, 160, 210, 260, 320, 400, 500, 600, 800};
    int nbins = 16;
    float xbins[] = {20, 30, 40, 50, 60, 70, 80, 100, 120, 160, 210, 260, 320, 400, 500, 600, 800};
    

histo1D["lumiWeights"] = new TH1F("lumiWeights","lumiWeights;lumiWeight;#events",100,0,4);

histo1D["BJetPt_TTJets"]= new TH1F("BJetPt_TTJets","BJetPt;BJetPt;#combinations",nbins,xbins);
histo1D["BJetPt_tagged_TTJets"]= new TH1F("BJetPt_tagged_TTJets","BJetPt_tagged;BJetPt_tagged;#combinations",nbins,xbins);

histo1D["BJetPt_TTTT"]= new TH1F("BJetPt_TTTT","BJetPt;BJetPt;#combinations",nbins,xbins);
histo1D["BJetPt_tagged_TTTT"]= new TH1F("BJetPt_tagged_TTTT","BJetPt_tagged;BJetPt_tagged;#combinations",nbins,xbins);
    
    
histo1D["CJetPt_TTJets"]= new TH1F("CJetPt_TTJets","CJetPt;CJetPt;#combinations",nbins,xbins);
histo1D["CJetPt_tagged_TTJets"]= new TH1F("CJetPt_tagged_TTJets","CJetPt_tagged;CJetPt_tagged;#combinations",nbins,xbins);
    
histo1D["CJetPt_TTTT"]= new TH1F("CJetPt_TTTT","CJetPt;CJetPt;#combinations",nbins,xbins);
histo1D["CJetPt_tagged_TTTT"]= new TH1F("CJetPt_tagged_TTTT","CJetPt_tagged;CJetPt_tagged;#combinations",nbins,xbins);
    

histo1D["LJetPt_TTJets_eta0-08"]= new TH1F("LJetPt_TTJets_eta0-08","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTJets_eta0-08"]= new TH1F("LJetPt_tagged_TTJets_eta0-08","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);

histo1D["LJetPt_TTJets_eta08-16"]= new TH1F("LJetPt_TTJets_eta08-16","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTJets_eta08-16"]= new TH1F("LJetPt_tagged_TTJets_eta08-16","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);
    
histo1D["LJetPt_TTJets_eta16-24"]= new TH1F("LJetPt_TTJets_eta16-24","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTJets_eta16-24"]= new TH1F("LJetPt_tagged_TTJets_eta16-24","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);

    
histo1D["LJetPt_TTTT_eta0-08"]= new TH1F("LJetPt_TTTT_eta0-08","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTTT_eta0-08"]= new TH1F("LJetPt_tagged_TTTT_eta0-08","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);
    
histo1D["LJetPt_TTTT_eta08-16"]= new TH1F("LJetPt_TTTT_eta08-16","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTTT_eta08-16"]= new TH1F("LJetPt_tagged_TTTT_eta08-16","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);
    
histo1D["LJetPt_TTTT_eta16-24"]= new TH1F("LJetPt_TTTT_eta16-24","LJetPt;LJetPt;#combinations",nbins,xbins);
histo1D["LJetPt_tagged_TTTT_eta16-24"]= new TH1F("LJetPt_tagged_TTTT_eta16-24","LJetPt_tagged;LJetPt_tagged;#combinations",nbins,xbins);
    
    
	
////////////////////////////////////////////////////////////////////
////////////////// Plots  //////////////////////////////////////////
////////////////////////////////////////////////////////////////////

string pathPNG = "FourTop"+postfix+channelpostfix;
pathPNG += "_MSPlots/"; 	
mkdir(pathPNG.c_str(),0777);

    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////// Loop on dataset ////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cout << " - Loop over datasets ... " << datasets.size () << " datasets !" << endl;

  for (unsigned int d = 0; d < datasets.size(); d++) //d < datasets.size()
  {
    if (verbose > 1){
      cout << "   Dataset " << d << " name : " << datasets[d]->Name () << " / title : " << datasets[d]->Title () << endl;
      cout << " - Cross section = " << datasets[d]->Xsection() << endl;
      cout << " - IntLumi = " << datasets[d]->EquivalentLumi() << "  NormFactor = " << datasets[d]->NormFactor() << endl;
      cout << " - Nb of events : " << datasets[d]->NofEvtsToRunOver() << endl;
    }

      //open files and load
    cout<<"Load Dataset"<<endl;
    treeLoader.LoadDataset (datasets[d], anaEnv);
    string previousFilename = "";
    int iFile = -1;
    string dataSetName = datasets[d]->Name();	
      
      
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////// Initialize JEC factors /////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
     vector<JetCorrectorParameters> vCorrParam;

    if(dataSetName.find("Data") == 0 || dataSetName.find("data") == 0 || dataSetName.find("DATA") == 0 ) // Data!
    {
      JetCorrectorParameters *L1JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/FT_53_V21_AN4_Summer13_Data_L1FastJet_AK5PFchs.txt");
      vCorrParam.push_back(*L1JetCorPar);
      JetCorrectorParameters *L2JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/FT_53_V21_AN4_Summer13_Data_L2Relative_AK5PFchs.txt");
      vCorrParam.push_back(*L2JetCorPar);
      JetCorrectorParameters *L3JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/FT_53_V21_AN4_Summer13_Data_L3Absolute_AK5PFchs.txt");
      vCorrParam.push_back(*L3JetCorPar);
      JetCorrectorParameters *L2L3ResJetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/FT_53_V21_AN4_Summer13_Data_L2L3Residual_AK5PFchs.txt");
      vCorrParam.push_back(*L2L3ResJetCorPar);
    }
    else
    {
      JetCorrectorParameters *L1JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/START53_V23_Summer13_L1FastJet_AK5PFchs.txt");
      vCorrParam.push_back(*L1JetCorPar);
      JetCorrectorParameters *L2JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/START53_V23_Summer13_L2Relative_AK5PFchs.txt");
      vCorrParam.push_back(*L2JetCorPar);
      JetCorrectorParameters *L3JetCorPar = new JetCorrectorParameters("../../TopTreeAnalysisBase/Calibrations/JECFiles/START53_V23_Summer13_L3Absolute_AK5PFchs.txt");
      vCorrParam.push_back(*L3JetCorPar);
    }
    JetCorrectionUncertainty *jecUnc = new JetCorrectionUncertainty("../../TopTreeAnalysisBase/Calibrations/JECFiles/START53_V23_Summer13_Uncertainty_AK5PFchs.txt");
//    JetCorrectionUncertainty *jecUnc = new JetCorrectionUncertainty(*(new JetCorrectorParameters("JECFiles/Fall12_V7_DATA_UncertaintySources_AK5PFchs.txt", "SubTotalMC")));
//    JetCorrectionUncertainty *jecUncTotal = new JetCorrectionUncertainty(*(new JetCorrectorParameters("JECFiles/Fall12_V7_DATA_UncertaintySources_AK5PFchs.txt", "Total")));
    
    JetTools *jetTools = new JetTools(vCorrParam, jecUnc, true);      
      
      
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////                      Loop on events                                                    ///////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    double scaleFactor = 1.;
    int itrigger = -1, previousRun = -1;
    int start = 0;
      
    unsigned int end = datasets[d]->NofEvtsToRunOver();
    cout <<"Number of events = "<<  end  <<endl;

    bool debug = false;

    if (verbose > 1) cout << " - Loop over events " << endl;
      
      double end_d =end;
      
      if (dataSetName=="TTJets"){
         end_d = 500000.;
	//          end_d = end_d/1.;
      }else if (dataSetName=="NP_overlay_TTTT"){
 end_d = 50000.;

}
      
      for (unsigned int ievt = start; ievt < 500000; ievt++)
    {
	if(ievt%1000 == 0)
		std::cout<<"Processing the "<<ievt<<"th event, time = "<< ((double)clock() - start) / CLOCKS_PER_SEC << " ("<<100*(ievt-start)/(end-start)<<"%)"<<flush<<"\r";

	//load event
	event = treeLoader.LoadEvent (ievt, vertex, init_muons, init_electrons, init_jets, mets);

	vector<TRootGenJet*> genjets;
	if( ! (dataSetName == "Data" || dataSetName == "data" || dataSetName == "DATA" ) )
	{
	  // loading GenJets as I need them for JER
	  		genjets = treeLoader.LoadGenJet(ievt);
	}

     if (debug)   cout << " got gen jets " << endl;

        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// Jet energy scale corrections     ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        // Apply Jet Corrections on-the-fly
        //coutObjectsFourVector(init_muons,init_electrons,init_jets,mets,"Before JES correction on the fly:");
        //if( dataSetName == "Data" || dataSetName == "data" || dataSetName == "DATA" )
           // jetTools->correctJets(init_jets,event->kt6PFJetsPF2PAT_rho(),true); //last boolean: isData (needed for L2L3Residual...)
       // else
            //jetTools->correctJets(init_jets,event->kt6PFJetsPF2PAT_rho(),false); //last boolean: isData (needed for L2L3Residual...)
        //coutObjectsFourVector(init_muons,init_electrons,init_jets,mets,"After JES correction on the fly:");  
        
        
// Declare selection instance    
Selection selection(init_jets, init_muons, init_electrons, mets);     
        
// Define object selection cuts
selection.setJetCuts(30.,2.5,0.01,1.,0.98,0,0);//Pt, Eta, EMF, n90Hits, fHPD, dRJetElectron, DRJets
//selection.setElectronCuts(30.,2.5,0.1,0.02,0.,999.,0,1); //Pt,Eta,RelIso,d0,MVAId,DistVzPVz, DRJets
 selection.setElectronCuts();

selection.setLooseElectronCuts(20,2.5,0.2,0.);

selection.setLooseElectronCuts(20,2.5,0.2,0.);
//selection.setMuonCuts(26.,2.1,.12,0,0.2,0,1,0.5,5,1 );
        
selection.setMuonCuts(26,2.1,0.12,0.2,0.3,1,0.5,5,0);
 //Pt,Eta,RelIso,NValidMuHits,d0, dRJets, NMatchedStations,DistVzPVz, 
                //float, float, float, int, float, float, int, float, int, int)
        
selection.setLooseMuonCuts(10,2.5,0.2);

//Select objects 
//	vector<TRootElectron*> selectedElectrons_NoIso = selection.GetSelectedElectrons(20,2.4,999.,vertex[0]);
vector<TRootElectron*> selectedElectrons       = selection.GetSelectedElectrons();
vector<TRootMuon*>     selectedMuons       = selection.GetSelectedMuons();
vector<TRootJet*>      selectedJets        = selection.GetSelectedJets(true); // ApplyJetId
vector<TRootMuon*>     selectedLooseMuons     = selection.GetSelectedLooseMuons();
vector<TRootElectron*> selectedLooseElectrons = selection.GetSelectedElectrons(); // VBTF ID
vector<TRootJet*>      selectedBJets; // B-Jets
vector<TRootJet*>      selectedLightJets; // light-Jets      
//vector<TRootJet*>      selectedJetsTLV;
//order jets wrt to Pt, then set bool corresponding to RefSel cuts.             
sort(selectedJets.begin(),selectedJets.end(),HighestPt()); //order muons wrt Pt. 
        
       // cout<< "sel jets size :" << selectedJets.size()  <<endl;
 
        selectedBJets.clear();
        
        for(unsigned int i=0; i<selectedJets.size(); i++){
            selectedBJets.push_back(selectedJets[i]);   
        }

        
	if(Muon){
	  if (debug) cout<< "Event passed..."<<endl;
   
        //applying baseline
        
	  //   if (!(selectedMuons.size() == 1   && selectedJets.size() ==6  && selectedBJets.size() >=2   )) continue;
        
	  //  if ( !( selectedJets.size() ==6 &&  selectedElectrons.size() == 1  && selectedLooseMuons.size() ==0  && selectedLooseElectrons.size() ==1  && mets[0]->Et()> 30.   ) ) continue;
        




        
	}
	else if(Electron){

	  double ht = 0.;

   for(unsigned int i=0; i<selectedJets.size(); i++){
     ht += selectedJets[i]->Pt();
        }


 if ( !( selectedJets.size() >= 6 &&  selectedElectrons.size() == 1  && selectedLooseMuons.size() ==0  && selectedLooseElectrons.size() ==1  && mets[0]->Et()>= 30. && ht >= 400.   ) ) continue;


  for(unsigned int i=0; i<selectedJets.size(); i++){

    if (dataSetName == "TTJets"){

      // cout <<"parton flavour == "<<  selectedJets[i]->partonFlavour()     << endl;

      if (fabs(selectedJets[i]->partonFlavour()) == 5 )     histo1D["BJetPt_TTJets"]->Fill(selectedJets[i]->Pt());
      else  if (fabs(selectedJets[i]->partonFlavour()) == 4 )     histo1D["CJetPt_TTJets"]->Fill(selectedJets[i]->Pt());
      else{

      if (  fabs(selectedJets[i]->Eta()) < 0.8  )     histo1D["LJetPt_TTJets_eta0-08"]->Fill(selectedJets[i]->Pt());
      if (  fabs(selectedJets[i]->Eta()) > 0.8  && fabs(selectedJets[i]->Eta()) < 1.6  )     histo1D["LJetPt_TTJets_eta08-16"]->Fill(selectedJets[i]->Pt());
      if ( fabs(selectedJets[i]->Eta()) > 1.6  && fabs(selectedJets[i]->Eta()) < 2.4   )     histo1D["LJetPt_TTJets_eta16-24"]->Fill(selectedJets[i]->Pt());
      }



    if ( selectedJets[i]->btag_combinedSecondaryVertexBJetTags() >0.679 ){ 
      if (fabs(selectedJets[i]->partonFlavour()) == 5 )     histo1D["BJetPt_tagged_TTJets"]->Fill(selectedJets[i]->Pt());
      else if (fabs(selectedJets[i]->partonFlavour()) == 4 )     histo1D["CJetPt_tagged_TTJets"]->Fill(selectedJets[i]->Pt());
      else{

      if (  fabs(selectedJets[i]->Eta()) < 0.8  )     histo1D["LJetPt_tagged_TTJets_eta0-08"]->Fill(selectedJets[i]->Pt());
      if (  fabs(selectedJets[i]->Eta()) > 0.8  && fabs(selectedJets[i]->Eta()) < 1.6  )     histo1D["LJetPt_tagged_TTJets_eta08-16"]->Fill(selectedJets[i]->Pt());
      if ( fabs(selectedJets[i]->Eta()) > 1.6  && fabs(selectedJets[i]->Eta()) < 2.4   )     histo1D["LJetPt_tagged_TTJets_eta16-24"]->Fill(selectedJets[i]->Pt());

		}

    } 
        
    }
     else if (dataSetName == "NP_overlay_TTTT") {

 if (fabs(selectedJets[i]->partonFlavour()) == 5 )     histo1D["BJetPt_TTTT"]->Fill(selectedJets[i]->Pt());
      else  if (fabs(selectedJets[i]->partonFlavour()) == 4 )     histo1D["CJetPt_TTTT"]->Fill(selectedJets[i]->Pt());
      else{

      if (  fabs(selectedJets[i]->Eta()) < 0.8  )     histo1D["LJetPt_TTTT_eta0-08"]->Fill(selectedJets[i]->Pt());
      if (  fabs(selectedJets[i]->Eta()) > 0.8  && fabs(selectedJets[i]->Eta()) < 1.6  )     histo1D["LJetPt_TTTT_eta08-16"]->Fill(selectedJets[i]->Pt());
      if ( fabs(selectedJets[i]->Eta()) > 1.6  && fabs(selectedJets[i]->Eta()) < 2.4   )     histo1D["LJetPt_TTTT_eta16-24"]->Fill(selectedJets[i]->Pt());
      }

    if ( selectedJets[i]->btag_combinedSecondaryVertexBJetTags() >0.679 ){ 
      if (fabs(selectedJets[i]->partonFlavour()) == 5 )     histo1D["BJetPt_tagged_TTTT"]->Fill(selectedJets[i]->Pt());
      else if (fabs(selectedJets[i]->partonFlavour()) == 4 )     histo1D["CJetPt_tagged_TTTT"]->Fill(selectedJets[i]->Pt());
      else{

      if (  fabs(selectedJets[i]->Eta()) < 0.8  )     histo1D["LJetPt_tagged_TTTT_eta0-08"]->Fill(selectedJets[i]->Pt());
      if (  fabs(selectedJets[i]->Eta()) > 0.8  && fabs(selectedJets[i]->Eta()) < 1.6  )     histo1D["LJetPt_tagged_TTTT_eta08-16"]->Fill(selectedJets[i]->Pt());
      if ( fabs(selectedJets[i]->Eta()) > 1.6  && fabs(selectedJets[i]->Eta()) < 2.4   )     histo1D["LJetPt_tagged_TTTT_eta16-24"]->Fill(selectedJets[i]->Pt());

		}

    }
     }
}
	}

        
    }//loop on events
    
      
     if (debug) cout <<"setting tree"<<endl;
   if (datasets.size() == 1)   // myFourTopTree->Write();
    
        
      //important: free memory
      treeLoader.UnLoadDataset();
      
      
  } //loop on datasets
    
    double n_true_bjets_d = n_true_bjets;
    double n_tagged_true_bjets_d = n_tagged_true_bjets;
    
    double Eff = n_tagged_true_bjets_d/n_true_bjets_d;
    
    double sigEff = (1/n_true_bjets_d)*sqrt(n_tagged_true_bjets_d*(1-Eff));
    
    cout <<" Eff = "  << Eff << " +/- "<< sigEff << endl;
    
    cout <<"N true bjets =   "<< n_true_bjets  <<    "   N tagged true b-jets =  "<<  n_tagged_true_bjets<< endl;

  //Once everything is filled ...
  cout << " We ran over all the data ;-)" << endl;
  
  ///////////////////
  // Writing
  //////////////////
  cout << " - Writing outputs to the files ..." << endl;

  //Selection tables
  if(Muon){ 
	//(bool mergeTT, bool mergeQCD, bool mergeW, bool mergeZ, bool mergeST)

      cout <<"  "<<endl;

  //Options : WithError (false), writeMerged (true), useBookTabs (false), addRawNumbers (false), addEfficiencies (false), addTotalEfficiencies (false), writeLandscape (false)
  //	selecTableMu.Write(  "FourTop"+postfix+"Table_Mu.tex",    true,true,true,true,false,false,true);
  }
    else if(Electron){



	
  }

    fout->cd();
    
    cout <<"1"<<endl;
    if(histo1D["BJetPt_tagged_TTJets"] && histo1D["BJetPt_TTJets"] && histo1D["BJetPt_tagged_TTTT"] && histo1D["BJetPt_TTTT"]  ){
        cout <<"2"<<endl;
        tgraph["e_b_TTJets"]->BayesDivide(histo1D["BJetPt_tagged_TTJets"],histo1D["BJetPt_TTJets"] );
        tgraph["e_b_TTTT"]->BayesDivide(histo1D["BJetPt_tagged_TTTT"],histo1D["BJetPt_TTTT"] );
        
        tgraph["e_c_TTJets"]->BayesDivide(histo1D["CJetPt_tagged_TTJets"],histo1D["CJetPt_TTJets"] );
        tgraph["e_c_TTTT"]->BayesDivide(histo1D["CJetPt_tagged_TTTT"],histo1D["CJetPt_TTTT"] );
        
       // tgraph["e_l_TTJets"]->BayesDivide(histo1D["LJetPt_tagged_TTJets"],histo1D["LJetPt_TTJets"] );
       // tgraph["e_l_TTTT"]->BayesDivide(histo1D["LJetPt_tagged_TTTT"],histo1D["LJetPt_TTTT"] );
        
        tgraph["e_l_TTJets_eta0-08"]->BayesDivide(histo1D["LJetPt_tagged_TTJets_eta0-08"],histo1D["LJetPt_TTJets_eta0-08"] );
        tgraph["e_l_TTTT_eta0-08"]->BayesDivide(histo1D["LJetPt_tagged_TTTT_eta0-08"],histo1D["LJetPt_TTTT_eta0-08"] );
        
        tgraph["e_l_TTJets_eta08-16"]->BayesDivide(histo1D["LJetPt_tagged_TTJets_eta08-16"],histo1D["LJetPt_TTJets_eta08-16"] );
        tgraph["e_l_TTTT_eta08-16"]->BayesDivide(histo1D["LJetPt_tagged_TTTT_eta08-16"],histo1D["LJetPt_TTTT_eta08-16"] );
    
        tgraph["e_l_TTJets_eta16-24"]->BayesDivide(histo1D["LJetPt_tagged_TTJets_eta16-24"],histo1D["LJetPt_TTJets_eta16-24"] );
        tgraph["e_l_TTTT_eta16-24"]->BayesDivide(histo1D["LJetPt_tagged_TTTT_eta16-24"],histo1D["LJetPt_TTTT_eta16-24"] );
    
    }
    
    
    cout <<"3"<<endl;
    
     TDirectory* tEffdir = fout->mkdir("TGraph");
     tEffdir->cd();
    cout <<"4"<<endl;
    
    for(map<string,TGraphAsymmErrors*>::const_iterator ig = tgraph.begin(); ig != tgraph.end(); ig++)
    {
        
        TGraphAsymmErrors* test = ig->second ;
        
        string grname = ig->first;
        
        string grtitle = "BTagEfficiency_" + grname;
        
        test->SetTitle(grtitle.c_str());
        
        test->Write(grtitle.c_str());
    }

  
  for(map<string,MultiSamplePlot*>::const_iterator it = MSPlot.begin(); it != MSPlot.end(); it++)
    {
	MultiSamplePlot *temp = it->second;
	TH1F *tempHisto_data;
	TH1F *tempHisto_TTTT;
	//	temp->addText("CMS preliminary");
	string name = it->first;
//	temp->Draw(false, name, true, true, true, true, true,1,false); // merge TT/QCD/W/Z/ST/
	//Draw(bool addRandomPseudoData = false, string label = string("CMSPlot"), bool mergeTT = false, bool mergeQCD = false, bool mergeW = false, bool mergeZ = false, bool mergeST = false, int scaleNPSignal = 1, bool addRatio = false, bool mergeVV = false, bool mergeTTV = false);
      
        temp->Write(fout, name, true, pathPNG, "pdf");
      
  }

  cout <<"1D  "<< histo1D.size()  <<"2D   "  <<  histo2D.size() <<endl;
 
   // histo1D["BJetPt"]->Write();
    
  TDirectory* th1dir = fout->mkdir("Histos1D");
  th1dir->cd();

  for(map<std::string,TH1F*>::const_iterator it = histo1D.begin(); it != histo1D.end(); it++)
  {

    
	TH1F *temp = it->second;
	temp->Write();
	//TCanvas* tempCanvas = TCanvasCreator(temp, it->first);
	//tempCanvas->SaveAs( (pathPNG+it->first+".png").c_str() );
  }
  TDirectory* th2dir = fout->mkdir("Histos2D");
  th2dir->cd();
   for(map<std::string,TH2F*>::const_iterator it = histo2D.begin(); it != histo2D.end(); it++)
  {

	TH2F *temp = it->second;
	temp->Write();
	//TCanvas* tempCanvas = TCanvasCreator(temp, it->first);
	//tempCanvas->SaveAs( (pathPNG+it->first+".png").c_str() );
  }

  //delete  
  delete fout;

  cout << "It took us " << ((double)clock() - start) / CLOCKS_PER_SEC << " to run the program" << endl;

  cout << "********************************************" << endl;
  cout << "           End of the program !!            " << endl;
  cout << "********************************************" << endl;

  return 0;
}

