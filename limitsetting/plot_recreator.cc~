#include "TFile.h"
#include "TH1F.h"
#include "THStack.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "TLatex.h"
#include "TStyle.h"
#include "TGraphAsymmErrors.h"
#include "TPad.h"
#include <string>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <math.h> 

using namespace std;


int main(){
  gStyle->SetLegendBorderSize(0);

  string channel = "mu";
  string filename; 

  if (channel == "e"){
  filename = "FourTopnoRho_EventSelection_El_preApp.root";
  }else{
  filename = "FourTop_EventSelection_wMETCut_Mu_preApp.root";
}

  TFile * f = new TFile(filename.c_str());
 
  int nvars = 11;

  string var_names[] = {"MVA", "HTX","HTRat", "MultiTopness", "HTb_SelectedJets", "5thJetPt", "6thJetPt","HTH", "NbOfSelectedJets" , "NbOfSelectedBJets", "SumJetMassX", "HTX_BDTCut","HTRat_BDTCut", "MultiTopness_BDTCut", "HTb_SelectedJets_BDTCut", "5thJetPt_BDTCut", "6thJetPt_BDTCut","HTH_BDTCut", "NbOfSelectedJets_BDTCut" , "NbOfSelectedBJets_BDTCut", "SumJetMassX_BDTCut"};
  // string var_names[] = {"HTH"};

  for (int plot = 0;  plot < nvars; plot++){


 TCanvas * c = new TCanvas();

  TPad *Canvas_1 = new TPad("Canvas_1", "Canvas_1",0.01,0.14,0.99,0.99);
  Canvas_1->Draw();
  Canvas_1->cd();
  Canvas_1->SetLogy();
  Canvas_1->SetBorderSize(0);
  Canvas_1->SetFrameBorderMode(0);

 
   THStack * ts = new THStack();

  string plot_ttll = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_TTJets_ll";
  string plot_ttcc = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_TTJets_cc";
  string plot_ttbb = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_TTJets_bb";

  //data
  string plot_data = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_Data";


  TH1F * h_Data = (TH1F*)f->Get(plot_data.c_str());

  //ttbar
  TH1F * h_TTJets_ll =  (TH1F*)f->Get(plot_ttll.c_str());
  TH1F * h_TTJets_bb =  (TH1F*)f->Get(plot_ttbb.c_str());
  TH1F * h_TTJets_cc =  (TH1F*)f->Get(plot_ttcc.c_str());

  h_TTJets_ll->SetFillColor(kRed);
  h_TTJets_cc->SetFillColor(kRed+1);
  h_TTJets_bb->SetFillColor(kRed+2);

  TH1F * h_EW = (TH1F*) h_TTJets_ll->Clone();
  h_EW->Reset();
  h_EW->SetFillColor(kGreen); 

  string plot_W4Jets = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_W_4Jets";
  string plot_Z4Jets = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_Z_4Jets";
  // string plot_Z4Jets_lm = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_Z_4Jets_lm";
  string plot_SingleTop_t_T = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_t_T";
  string plot_SingleTop_t_TBar = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_t_TBar";
  string plot_SingleTop_s_T = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_s_T";
  string plot_SingleTop_s_TBar = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_s_TBar";
  string plot_SingleTop_tW_T = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_tW_T";
  string plot_SingleTop_tW_TBar = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_SingleTop_tW_TBar";
  string plot_WW = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_WW";
  string plot_WZ = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_WZ";
  string plot_ZZ = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_ZZ";

  //EW
  TH1F * h_W4Jets =  (TH1F*)f->Get(plot_W4Jets.c_str());
  cout <<"w 4 jets "<<  h_W4Jets->Integral()   <<endl;
  h_EW->Add(h_W4Jets);
  TH1F * h_Z4Jets =  (TH1F*)f->Get(plot_Z4Jets.c_str());
  cout <<"z 4 jets "<<  h_Z4Jets->Integral()   <<endl;
  h_EW->Add(h_Z4Jets);
  // TH1F * h_Z4Jets_lm =  (TH1F*)f->Get(plot_Z4Jets_lm.c_str());
  //h_EW->Add(h_Z4Jets_lm);
  //  cout <<"w 4 jets "<<  h_Z4Jets_lm->Integral()   <<endl;
  TH1F * h_SingleTop_t_T =  (TH1F*)f->Get(plot_SingleTop_t_T.c_str());
  h_EW->Add(h_SingleTop_t_T);
  cout <<"st t T jets "<<  h_SingleTop_t_T->Integral()   <<endl;
  TH1F * h_SingleTop_t_TBar =  (TH1F*)f->Get(plot_SingleTop_t_TBar.c_str());
  cout <<"st t TBar "<<  h_SingleTop_t_TBar->Integral()   <<endl;
  h_EW->Add(h_SingleTop_t_TBar);
  TH1F * h_SingleTop_s_T =  (TH1F*)f->Get(plot_SingleTop_s_T.c_str());
  cout <<"st s T"<<  h_SingleTop_s_T->Integral()   <<endl;
  h_EW->Add(h_SingleTop_s_T);
  TH1F * h_SingleTop_s_TBar =  (TH1F*)f->Get(plot_SingleTop_s_TBar.c_str());
  cout <<"st s TBar"<<  h_SingleTop_s_TBar->Integral()   <<endl;
   h_EW->Add(h_SingleTop_s_TBar);
  TH1F * h_SingleTop_tW_T =  (TH1F*)f->Get(plot_SingleTop_tW_T.c_str());
  cout <<"st tW T"<<  h_SingleTop_tW_T->Integral()   <<endl;
  h_EW->Add(h_SingleTop_tW_T);
  TH1F * h_SingleTop_tW_TBar =  (TH1F*)f->Get(plot_SingleTop_tW_TBar.c_str());
  cout <<"st tW TBar"<<  h_SingleTop_tW_TBar->Integral()   <<endl;
  h_EW->Add(h_SingleTop_tW_TBar);
  TH1F * h_WW =  (TH1F*)f->Get(plot_WW.c_str());
  h_EW->Add(h_WW);
  cout <<"WW "<<  h_WW->Integral()   <<endl;
  TH1F * h_WZ =  (TH1F*)f->Get(plot_WZ.c_str());
  cout <<"WZ "<<  h_WZ->Integral()   <<endl;
  h_EW->Add(h_WZ);
  TH1F * h_ZZ =  (TH1F*)f->Get(plot_ZZ.c_str());
  //h_EW->Add(h_ZZ);
  cout <<"ZZ "<<  h_ZZ->Integral()   <<endl;

 string plot_ttZ = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_ttZ";
 string plot_ttW = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_ttW";
 string plot_ttH = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_ttH";
 string plot_TTJets_Other = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_TTJets_Other";

  //tt other
  TH1F * h_TTJets_Other = (TH1F*) h_TTJets_ll->Clone();
  h_TTJets_Other->Reset();
  h_TTJets_Other->SetFillColor(kGray);

  TH1F * h_ttZ =  (TH1F*)f->Get(plot_ttZ.c_str());
  h_TTJets_Other->Add(h_ttZ);
  cout <<"ttZ "<<  h_ttZ->Integral()   <<endl;
  TH1F * h_ttW =  (TH1F*)f->Get(plot_ttW.c_str());
  h_TTJets_Other->Add(h_ttW);
  cout <<"ttW "<<  h_ttW->Integral()   <<endl;
  TH1F * h_ttH =  (TH1F*)f->Get(plot_ttH.c_str());
  h_TTJets_Other->Add(h_ttH);
  cout <<"ttH "<<  h_ttH->Integral()   <<endl;
  cout <<"tt other "<<  h_TTJets_Other->Integral()   <<endl;
  TH1F * h_TTJets_other =  (TH1F*)f->Get(plot_TTJets_Other.c_str());
  h_TTJets_Other->Add(h_TTJets_other);
  cout <<"tt other "<<  h_TTJets_Other->Integral()   <<endl;


 string plot_tttt = "MultiSamplePlot_" + var_names[plot] + "/"  + var_names[plot] + "_NP_overlay_TTTT";

  //tttt
 TH1F * h_tttt =  (TH1F*)f->Get(plot_tttt.c_str());

  h_tttt->Scale(100.);
  h_tttt->SetLineWidth(3);

  ts->Add(h_TTJets_Other);
  ts->Add(h_EW);  
  ts->Add(h_TTJets_bb);
  ts->Add(h_TTJets_cc);
  ts->Add(h_TTJets_ll);

  ts->SetMaximum(100000);
  ts->SetMinimum(1);

  int nbins = h_Data->GetSize() - 1;

  std::ostringstream strs;
  strs<< std::setprecision(5)  << h_TTJets_ll->Integral(0, nbins) ; 
  std::string str = strs.str();
  // string ttll_leg = "tt + ll (" + str + " entries)";
 string ttll_leg = "tt + ll";

  cout <<"tt + ll "<< str    <<endl;
  strs.str(std::string());

  strs<< std::setprecision(4) << h_TTJets_cc->Integral(0, nbins) ; 
  str = strs.str();
  //  string ttcc_leg = "tt + cc (" + str + " entries)";
  string ttcc_leg = "tt + cc";

  cout <<"tt + cc "<< str    <<endl;
  strs.str(std::string());
  strs<< std::setprecision(4) << h_TTJets_bb->Integral(0, nbins) ; 
  str = strs.str();
  //  string ttbb_leg = "tt + bb (" + str + " entries)";
  string ttbb_leg = "tt + bb";


  strs.str(std::string());
  strs<< std::setprecision(4) << h_EW->Integral(0, nbins) ; 
  str = strs.str();
  //  string EW_leg = "EW (" + str + " entries)";
  string EW_leg = "EW";

  strs.str(std::string());
  strs<< std::setprecision(4) << h_TTJets_Other->Integral(0, nbins) ; 
  str = strs.str();
  //  string TTJets_Other_leg = "tt other (" + str + " entries)";
  string TTJets_Other_leg = "tt other";


  strs.str(std::string());
  strs<< std::setprecision(4) << h_Data->Integral(0,nbins) ; 
  str = strs.str();
  //  string Data_leg = "Data (" + str + " entries)";
  string Data_leg = "Data";

  string sys_filename;
  //Add sys error band.
  if(channel == "e"){
   sys_filename = "../ScaleFilesEl_PreApp/Error_" + var_names[plot] + ".root";
  }else{
   sys_filename = "../ScaleFilesMu_PreApp/Error_" + var_names[plot] + ".root";
}



  TFile* f_Sys= new TFile(sys_filename.c_str());

  TH1F * h_Up = (TH1F*)f_Sys->Get("Up");
  TH1F * h_Down = (TH1F*)f_Sys->Get("Down");


  //  h_EW->Draw("HIST");
  // ts->Draw("HIST");
  // h_Data->Draw("same");
  // h_tttt->Draw("HISTsame");

  //  ts->GetHistogram()->GetXaxis()->SetTickLength(0);
  // ts->GetHistogram()->GetXaxis()->SetLabelOffset(999);

   TH1F * h_stack = (TH1F*)ts->GetStack()->Last();

   double lastbin = h_stack->GetBinContent(nbins-1);
   double overflow = h_stack->GetBinContent(nbins);

   h_stack->SetBinContent(nbins-1, lastbin+overflow );

   TGraphAsymmErrors Errors = TGraphAsymmErrors(h_stack);

   //TAxis *xaxis = h->GetXaxis(); etc.
   
   TH1F * h_diff = (TH1F*)h_Data->Clone();
   TGraphAsymmErrors diff_Errors = TGraphAsymmErrors(h_diff);

   for (int i = 1; i<nbins; i++){

     double binCenter = h_stack->GetXaxis()->GetBinCenter(i);
     double nom = h_stack->GetBinContent(i); 
     double scale_up =  h_Up->GetBinContent(i);
     double scale_down =  h_Down->GetBinContent(i);
     double eyl, eyh =0;
     double data = h_Data->GetBinContent(i);

     double diff =0;
 
     diff_Errors.SetPoint(i-1, binCenter, 0.);

     if (nom!=0 && data !=0) {diff = 100*((data - nom)/(nom));
     h_diff->SetBinContent(i, diff);
     }

     if(scale_up > scale_down){
            eyh = fabs( scale_up - nom );
            eyl = fabs( scale_down - nom );
            }                   
     else{
         eyl = fabs( scale_up - nom );
         eyh = fabs( scale_down - nom );
                      }



     if (nom !=0){
      Errors.SetPointEYlow(i-1, eyl);
      Errors.SetPointEYhigh(i-1, eyh);
     }

      if(data !=0){
      diff_Errors.SetPointEYlow(i-1, 100*(eyl/nom));
      diff_Errors.SetPointEYhigh(i-1, 100*(eyh/nom));
      }

      // Errors.SetPoint(i,binCenter, nom );
      cout <<"i"<< i <<  "  binCenter "<< binCenter << "  nom "<< nom << " eyl "  << eyl << " eyh "  << eyh <<  endl;
    }

     diff_Errors.SetFillColor(1);
     diff_Errors.SetFillStyle(3005);
     Errors.SetFillColor(1);
     Errors.SetFillStyle(3005);
     // Errors.Draw("2");
     Errors.SetMarkerColor(kViolet);

   //  h_EW->Draw("HIST");

     ///HERE

   ts->Draw("HIST");


  if (var_names[plot] == "MultiTopness"){
      ts->GetHistogram()->GetXaxis()->SetRangeUser(-1,0.2);
      h_diff->GetXaxis()->SetRangeUser(-1,0.2);
      }

  if (var_names[plot] == "NbOfSelectedJets"){

    cout <<"yes...."<<endl;

      ts->GetHistogram()->GetXaxis()->SetRangeUser(5,14);
      h_diff->GetXaxis()->SetRangeUser(5,14);
      }

  if (var_names[plot] == "NbOfSelectedBJets"){
      ts->GetHistogram()->GetXaxis()->SetRangeUser(1,7);
      h_diff->GetXaxis()->SetRangeUser(1,7);
        

   }



   h_Data->Draw("same");
   Errors.Draw("2");
   // h_Data->Draw("same");
   h_tttt->Draw("HISTsame");

   ts->GetYaxis()->SetTitle("Events");

   // Errors.Draw("ALP");
   TFile * f_test = new TFile("niceplot.root","RECREATE");
   ts->Write();
   Errors.Write();

   f_test->Write();
   f_test->Close();
   Canvas_1->Draw();

   //   Canvas_1->Modified();
   //Canvas_1->Update();

   //   ts->GetHistogram()->GetXaxis()->SetTickLength(0);
   // ts->GetHistogram()->GetXaxis()->SetLabelOffset(999);

   TLegend * legend = new TLegend(0.6,0.63,0.85,0.88);
   legend->SetFillColor(0);
   legend->AddEntry(h_TTJets_ll,ttll_leg.c_str(), "f");
   legend->AddEntry(h_TTJets_cc,ttcc_leg.c_str()   , "f");
   legend->AddEntry(h_TTJets_bb,ttbb_leg.c_str()  , "f");
   legend->AddEntry(h_EW, EW_leg.c_str()  , "f");
   legend->AddEntry(h_TTJets_Other,TTJets_Other_leg.c_str()  , "f");
   legend->AddEntry(&Errors ,"Scale uncertainty", "f");
   legend->AddEntry(h_tttt,"SM tttt (X 100)", "l"); 
   legend->AddEntry(h_Data,Data_leg.c_str(), "lep"); 
  

   legend->Draw();

   string header = "CMS Preliminary, 19.6 fb^{-1} at #sqrt{s} = 8 TeV";

   TLatex text;
   text.SetNDC(true);
   text.SetTextAlign(12);
   text.SetTextFont(42);
   text.SetTextSize(0.05);
   text.DrawLatex(0.11,0.93,header.c_str());


   TLatex text3;
   text3.SetNDC(true);
   text3.SetTextAlign(12);
   text3.SetTextFont(42);
   text3.SetTextSize(0.04);
   if(channel == "e"){
   text3.DrawLatex(0.15,0.78,"#font[42]{ #splitline{1 iso. e,  #geq 6 Jets, #geq 2 b-tags}{H_{t} #geq 400 GeV/c, E^{miss}_{t} #geq 30 GeV}}");
   }else{
   text3.DrawLatex(0.15,0.78,"#font[42]{ #splitline{1 iso. #mu,  #geq 6 Jets, #geq 2 b-tags}{H_{t} #geq 400 GeV/c, E^{miss}_{t} #geq 30 GeV}}");

}

    c->cd();
    TPad *Canvas_2 = new TPad("Canvas_2", "Canvas_2",0.01,0.04,0.99,0.23);
    Canvas_2->Draw();
    Canvas_2->cd();
    Canvas_2->SetTopMargin(0);
    Canvas_2->SetBottomMargin(0.3);
    Canvas_2->Range(-0.3875,-0.4930139,0.4875,3.98021);
    Canvas_2->SetFillColor(0);
    Canvas_2->SetBorderMode(0);
    Canvas_2->SetBorderSize(0);
    // Canvas_2->SetGridx();
    Canvas_2->SetGridy();
    Canvas_2->SetFrameBorderMode(0);
    h_diff->SetTitle("");

    string x_title = var_names[plot];

    if (var_names[plot] == "MVA"){
      x_title= "BDT Discriminant";
    }
      else if(var_names[plot] == "NbOfSelectedBJets") {
	x_title = "N_{tags}";

}
      else if(var_names[plot] == "NbOfSelectedJets") {
	x_title = "N_{jets}";

      }

      else if (var_names[plot] == "MultiTopness"){

	h_diff->GetXaxis()->SetRangeUser(-1, 0.2);
}

	 else{

      x_title = var_names[plot];
      }


    h_diff->SetMaximum( 170. );
    h_diff->SetMinimum(-170.);
    h_diff->GetXaxis()->SetLabelSize(0.13);
    h_diff->GetYaxis()->SetLabelSize(0.1);
    h_diff->GetXaxis()->SetTitleSize(0.19);
    h_diff->GetXaxis()->SetTitleOffset(0.75);
    h_diff->GetXaxis()->SetTitle(x_title.c_str());
    h_diff->GetYaxis()->SetTitle("#frac{Data - MC}{MC} (%)");
    h_diff->GetYaxis()->SetTitleSize(0.14);
    h_diff->GetYaxis()->SetTitleOffset(0.25);
    h_diff->SetMarkerSize(1.5);
    h_diff->GetYaxis()->SetNdivisions(6);



    h_diff->Draw("HIST");
    diff_Errors.Draw("2");

    if(var_names[plot] == "NbOfSelectedBJets") {
      TFile * can = new TFile("canvas.root","RECREATE");
      c->Write();
      can->Write();

    }


    string pdf_name;

    if(channel == "e"){ 
     pdf_name = "plot_recreator/" + var_names[plot] + "_e.pdf";   
 }
    else{
 pdf_name = "plot_recreator/" + var_names[plot] + "_mu.pdf";  
}

    c->SaveAs(pdf_name.c_str());

  }

}
