////////////////////////////////////////////////////////////////////////////////////
//
// Taken from http://ghl.web.cern.ch/ghl/html/HistFactoryDoc.html
//
/////////////////////////////////////////////////////////////////////////////////////
#include "RooStats/HistFactory/Measurement.h"
#include "RooStats/HistFactory/MakeModelAndMeasurementsFast.h"


using namespace RooStats;

double poimin = 0.;
double poimax = 100.;
std::string infile_shapes_el = "SystematicShapes_norm_El.root";
std::string infile_nom_el = "NominalShapes_El.root";

std::string infile_shapes_mu = "SystematicShapes_norm_Mu.root";
std::string infile_nom_mu = "NominalShapes_Mu.root";

//std::string infile_Scale = "ScaleFiles/Error_MVA.root";
//std::string infile_Matching = "MatchingFiles/Error_MVA.root"; 
//std::string infile_bTag_plus = "FourTop_EventSelection_bTagPlus_Mu.root"; 
//std::string infile_bTag_minus = "FourTop_EventSelection_bTagMinus_Mu.root"; 
//std::string infile_misTag_plus = "FourTop_EventSelection_misTagPlus_Mu.root";
//std::string infile_misTag_minus = "FourTop_EventSelection_misTagMinus_Mu.root";

void HistFact(){
   // using c++ and ROOT
   // Create the measurement object
   // This is the top node of the structure
   // We do some minor configuration as well
   RooStats::HistFactory::Measurement meas("my_measurement", "my measurement");

   // Set the prefix that will appear before all output for this measurement We Set ExportOnly to false, meaning
   // we will fit the measurement and make plots in addition to saving the workspace
   meas.SetOutputFilePrefix("results/tttt");
   meas.SetExportOnly(false);

   // Set the name of the parameter of interest,Note that this parameter hasn't yet been
   // created, we are anticipating it
   meas.SetPOI("SigXsecOverSM");

   // Set the luminosity There are a few conventions for this. Here, we assume that all histograms have
   // already been scaled by luminosity We also set a 10% uncertainty
   meas.SetLumi(1.0);
   meas.SetLumiRelErr(0.04); //so an uncertainty of 0.47 on a luminosity of 4.7

   // Okay, now that we've configured the measurement, we'll start building the tree. We begin by creating the first channel
   RooStats::HistFactory::Channel chanMu_6j("channel_mu_6j");

   // First, we set the 'data' for this channel The data is a histogram represeting the measured distribution.  It can have 1 or many bins. In this example, we assume that the data histogram is already made and saved in a ROOT file. So, to 'set the data', we give this channel the path to that ROOT file and the name of the data histogram in that root file The arguments are: SetData(HistogramName, HistogramFile)
   chanMu_6j.SetData("data_6j", infile_nom_mu);

   // Now that we have a channel and have attached data to it, we will start creating our Samples
   // These describe the various processes that we use to model the data.
   // Here, they just consist of a signal process
   RooStats::HistFactory::Sample signal_mu_6j("signal_mu_6j", "tttt_6j", infile_nom_mu);

   // Having created this sample, we configure it
   // First, we add the cross-section scaling
   // parameter that we call SigXsecOverSM
   // Then, we add a systematic with a 5% uncertainty
   // Finally, we add it to our channel
   signal_mu_6j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
   signal_mu_6j.AddOverallSys("tttt_mu",  0.9, 1.1);
   chanMu_6j.AddSample(signal_mu_6j);

   // We do a similar thing for all our backgrounds
   RooStats::HistFactory::Sample background1_mu_6j("TTJets_Mu_6j", "tt_6j", infile_nom_mu);
   background1_mu_6j.ActivateStatError();
   background1_mu_6j.AddOverallSys("ttbar_mu_6j", 0.96, 1.04 );
   background1_mu_6j.AddHistoSys("Scale_mu_6j","Scale_Down_6j", infile_shapes_mu,"","Scale_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("Matching","Matching_Down_6j", infile_shapes_mu,"","Matching_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("JES","JES_Down_6j", infile_shapes_mu,"","JES_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("bTag","bTag_Down_6j", infile_shapes_mu,"","bTag_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("misTag","misTag_Down_6j", infile_shapes_mu,"","misTag_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("ttbb","ttbb_Down_6j", infile_shapes_mu,"","ttbb_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("leptonSF","leptonSF_Down_6j", infile_shapes_mu,"","leptonSF_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("PU","PU_Down_6j", infile_shapes_mu,"","PU_Up_6j", infile_shapes_mu,"");
   background1_mu_6j.AddHistoSys("JER","JER_Down_6j", infile_shapes_mu,"","JER_Up_6j", infile_shapes_mu,"");


   chanMu_6j.AddSample(background1_mu_6j);

   RooStats::HistFactory::Sample background2_mu_6j("TTOther_Mu_6j", "ttOther_6j", infile_nom_mu );
   background2_mu_6j.ActivateStatError();
   background2_mu_6j.AddOverallSys("ttother_mu", 0.96, 1.04 );
   chanMu_6j.AddSample(background2_mu_6j);


   RooStats::HistFactory::Sample background3_mu_6j("EW_Mu_6j", "EW_6j", infile_nom_mu );
   background3_mu_6j.ActivateStatError();
   background3_mu_6j.AddOverallSys("EW_mu", 0.96, 1.04 );
   chanMu_6j.AddSample(background3_mu_6j);


   RooStats::HistFactory::Channel chanMu_7j("channel_mu_7j");
   chanMu_7j.SetData("data_7j", infile_nom_mu);

   RooStats::HistFactory::Sample signal_mu_7j("signal_mu_7j", "tttt_7j", infile_nom_mu);

   signal_mu_7j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
   signal_mu_7j.AddOverallSys("tttt_mu",  0.9, 1.1);
   chanMu_7j.AddSample(signal_mu_7j);


   RooStats::HistFactory::Sample background1_mu_7j("TTJets_Mu_7j", "tt_7j", infile_nom_mu);
   background1_mu_7j.ActivateStatError();
   background1_mu_7j.AddOverallSys("ttbar_mu_7j", 0.96, 1.04 );
   background1_mu_7j.AddHistoSys("Scale_mu_7j","Scale_Down_7j", infile_shapes_mu,"","Scale_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("Matching","Matching_Down_7j", infile_shapes_mu,"","Matching_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("JES","JES_Down_7j", infile_shapes_mu,"","JES_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("bTag","bTag_Down_7j", infile_shapes_mu,"","bTag_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("misTag","misTag_Down_7j", infile_shapes_mu,"","misTag_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("ttbb","ttbb_Down_7j", infile_shapes_mu,"","ttbb_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("leptonSF","leptonSF_Down_7j", infile_shapes_mu,"","leptonSF_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("PU","PU_Down_7j", infile_shapes_mu,"","PU_Up_7j", infile_shapes_mu,"");
   background1_mu_7j.AddHistoSys("JER","JER_Down_7j", infile_shapes_mu,"","JER_Up_7j", infile_shapes_mu,"");

   chanMu_7j.AddSample(background1_mu_7j);

   RooStats::HistFactory::Sample background2_mu_7j("TTOther_Mu_7j", "ttOther_7j", infile_nom_mu );
   background2_mu_7j.ActivateStatError();
   background2_mu_7j.AddOverallSys("ttother_mu", 0.96, 1.04 );
   chanMu_7j.AddSample(background2_mu_7j);


   RooStats::HistFactory::Sample background3_mu_7j("EW_Mu_7j", "EW_7j", infile_nom_mu );
   background3_mu_7j.ActivateStatError();
   background3_mu_7j.AddOverallSys("EW_mu", 0.96, 1.04 );
   chanMu_7j.AddSample(background3_mu_7j);


   RooStats::HistFactory::Channel chanMu_8j("channel_mu_8j");
   chanMu_8j.SetData("data_8j", infile_nom_mu);

   RooStats::HistFactory::Sample signal_mu_8j("signal_mu_8j", "tttt_8j", infile_nom_mu);

   signal_mu_8j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
   signal_mu_8j.AddOverallSys("tttt_mu",  0.9, 1.1);
   chanMu_8j.AddSample(signal_mu_8j);


   RooStats::HistFactory::Sample background1_mu_8j("TTJets_Mu_8j", "tt_8j", infile_nom_mu);
   background1_mu_8j.ActivateStatError();
   background1_mu_8j.AddOverallSys("ttbar_mu_8j", 0.96, 1.04 );
   background1_mu_8j.AddHistoSys("Scale_mu_8j","Scale_Down_8j", infile_shapes_mu,"","Scale_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("Matching","Matching_Down_8j", infile_shapes_mu,"","Matching_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("JES","JES_Down_8j", infile_shapes_mu,"","JES_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("bTag","bTag_Down_8j", infile_shapes_mu,"","bTag_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("misTag","misTag_Down_8j", infile_shapes_mu,"","misTag_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("ttbb","ttbb_Down_8j", infile_shapes_mu,"","ttbb_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("leptonSF","leptonSF_Down_8j", infile_shapes_mu,"","leptonSF_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("PU","PU_Down_8j", infile_shapes_mu,"","PU_Up_8j", infile_shapes_mu,"");
   background1_mu_8j.AddHistoSys("JER","JER_Down_8j", infile_shapes_mu,"","JER_Up_8j", infile_shapes_mu,"");

   chanMu_8j.AddSample(background1_mu_8j);

    RooStats::HistFactory::Sample background2_mu_8j("TTOther_Mu_8j", "ttOther_8j", infile_nom_mu );
    background2_mu_8j.ActivateStatError();
    background2_mu_8j.AddOverallSys("ttother_mu", 0.96, 1.04 );
    chanMu_8j.AddSample(background2_mu_8j);


   RooStats::HistFactory::Sample background3_mu_8j("EW_Mu_8j", "EW_8j", infile_nom_mu );
   background3_mu_8j.ActivateStatError();
   background3_mu_8j.AddOverallSys("EW_mu", 0.96, 1.04 );
   chanMu_8j.AddSample(background3_mu_8j);


   //Add electron channel in the exactly same way      
    RooStats::HistFactory::Channel chanEl_6j("channel_el_6j");
    
    chanEl_6j.SetData("data_6j", infile_nom_el);
    
    RooStats::HistFactory::Sample signal_el_6j("signal_el_6j", "tttt_6j", infile_nom_el);
    
    signal_el_6j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
    signal_el_6j.AddOverallSys("tttt_el",  0.95, 1.05);
    chanEl_6j.AddSample(signal_el_6j);
    

    RooStats::HistFactory::Sample background1_el_6j("TTJets_El_6j", "tt_6j", infile_nom_el);
    background1_el_6j.ActivateStatError();
    background1_el_6j.AddOverallSys("ttbar_el_6j", 0.96, 1.04 );
    background1_el_6j.AddHistoSys("Scale_el_6j","Scale_Down_6j", infile_shapes_el,"","Scale_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("Matching","Matching_Down_6j", infile_shapes_el,"","Matching_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("JES","JES_Down_6j", infile_shapes_el,"","JES_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("bTag","bTag_Down_6j", infile_shapes_el,"","bTag_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("misTag","misTag_Down_6j", infile_shapes_el,"","misTag_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("ttbb","ttbb_Down_6j", infile_shapes_el,"","ttbb_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("leptonSF","leptonSF_Down_6j", infile_shapes_el,"","leptonSF_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("PU","PU_Down_6j", infile_shapes_el,"","PU_Up_6j", infile_shapes_el,"");
    background1_el_6j.AddHistoSys("JER","JER_Down_6j", infile_shapes_el,"","JER_Up_6j", infile_shapes_el,"");    

    chanEl_6j.AddSample(background1_el_6j);
    
    RooStats::HistFactory::Sample background2_el_6j("TTOther_El_6j", "ttOther_6j", infile_nom_el );
    background2_el_6j.ActivateStatError();
    background2_el_6j.AddOverallSys("ttother_el", 0.96, 1.04 );
    chanEl_6j.AddSample(background2_el_6j);
     
    RooStats::HistFactory::Sample background3_el_6j("EW_El_6j", "EW_6j", infile_nom_el);
    background3_el_6j.ActivateStatError();
    background3_el_6j.AddOverallSys("EW_el", 0.96, 1.04 );
    chanEl_6j.AddSample(background3_el_6j);
     


    RooStats::HistFactory::Channel chanEl_7j("channel_el_7j");
    
    chanEl_7j.SetData("data_7j", infile_nom_el);
    
    RooStats::HistFactory::Sample signal_el_7j("signal_el_7j", "tttt_7j", infile_nom_el);
    
    signal_el_7j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
    signal_el_7j.AddOverallSys("tttt_el",  0.95, 1.05);
    chanEl_7j.AddSample(signal_el_7j);
    

    RooStats::HistFactory::Sample background1_el_7j("TTJets_El_7j", "tt_7j", infile_nom_el);
    background1_el_7j.ActivateStatError();
    background1_el_7j.AddOverallSys("ttbar_el_7j", 0.96, 1.04 );
    background1_el_7j.AddHistoSys("Scale_el_7j","Scale_Down_7j", infile_shapes_el,"","Scale_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("Matching","Matching_Down_7j", infile_shapes_el,"","Matching_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("JES","JES_Down_7j", infile_shapes_el,"","JES_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("bTag","bTag_Down_7j", infile_shapes_el,"","bTag_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("misTag","misTag_Down_7j", infile_shapes_el,"","misTag_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("ttbb","ttbb_Down_7j", infile_shapes_el,"","ttbb_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("leptonSF","leptonSF_Down_7j", infile_shapes_el,"","leptonSF_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("PU","PU_Down_7j", infile_shapes_el,"","PU_Up_7j", infile_shapes_el,"");
    background1_el_7j.AddHistoSys("JER","JER_Down_7j", infile_shapes_el,"","JER_Up_7j", infile_shapes_el,"");    

    chanEl_7j.AddSample(background1_el_7j);
    
    RooStats::HistFactory::Sample background2_el_7j("TTOther_El_7j", "ttOther_7j", infile_nom_el );
    background2_el_7j.ActivateStatError();
    background2_el_7j.AddOverallSys("ttother_el", 0.96, 1.04 );
    chanEl_7j.AddSample(background2_el_7j);
     
    RooStats::HistFactory::Sample background3_el_7j("EW_El_7j", "EW_7j", infile_nom_el);
    background3_el_7j.ActivateStatError();
    background3_el_7j.AddOverallSys("EW_el", 0.96, 1.04 );
    chanEl_7j.AddSample(background3_el_7j);


    RooStats::HistFactory::Channel chanEl_8j("channel_el_8j");    
    chanEl_8j.SetData("data_8j", infile_nom_el);
    
    RooStats::HistFactory::Sample signal_el_8j("signal_el_8j", "tttt_8j", infile_nom_el);
    
    signal_el_8j.AddNormFactor("SigXsecOverSM", 20, poimin, poimax);
    signal_el_8j.AddOverallSys("tttt_el",  0.95, 1.05);
    chanEl_8j.AddSample(signal_el_8j);
    

    RooStats::HistFactory::Sample background1_el_8j("TTJets_El_8j", "tt_8j", infile_nom_el);
    background1_el_8j.ActivateStatError();
    background1_el_8j.AddOverallSys("ttbar_el_8j", 0.96, 1.04 );
    background1_el_8j.AddHistoSys("Scale_el_8j","Scale_Down_8j", infile_shapes_el,"","Scale_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("Matching","Matching_Down_8j", infile_shapes_el,"","Matching_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("JES","JES_Down_8j", infile_shapes_el,"","JES_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("bTag","bTag_Down_8j", infile_shapes_el,"","bTag_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("misTag","misTag_Down_8j", infile_shapes_el,"","misTag_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("ttbb","ttbb_Down_8j", infile_shapes_el,"","ttbb_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("leptonSF","leptonSF_Down_8j", infile_shapes_el,"","leptonSF_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("PU","PU_Down_8j", infile_shapes_el,"","PU_Up_8j", infile_shapes_el,"");
    background1_el_8j.AddHistoSys("JER","JER_Down_8j", infile_shapes_el,"","JER_Up_8j", infile_shapes_el,"");    

    chanEl_8j.AddSample(background1_el_8j);
    
    RooStats::HistFactory::Sample background2_el_8j("TTOther_El_8j", "ttOther_8j", infile_nom_el );
    background2_el_8j.ActivateStatError();
    background2_el_8j.AddOverallSys("ttother_el", 0.96, 1.04 );
    chanEl_8j.AddSample(background2_el_8j);
     
    RooStats::HistFactory::Sample background3_el_8j("EW_El_8j", "EW_8j", infile_nom_el);
    background3_el_8j.ActivateStatError();
    background3_el_8j.AddOverallSys("EW_el", 0.96, 1.04 );
    chanEl_8j.AddSample(background3_el_8j);


   // Now that we have fully configured our channel,
   // we add it to the main measurement
     meas.AddChannel(chanMu_6j);
     meas.AddChannel(chanMu_7j);
     meas.AddChannel(chanMu_8j);
     //   meas.AddChannel(chanEl_6j);
     // meas.AddChannel(chanEl_7j);
     //meas.AddChannel(chanEl_8j);    

     std::string sc_mu_6j = "Scale_mu_6j";
     std::string sc_mu_7j = "Scale_mu_7j";
     std::string sc_mu_8j = "Scale_mu_8j";
     std::string sc_el_6j = "Scale_el_6j";
     std::string sc_el_7j = "Scale_el_7j";
     std::string sc_el_8j = "Scale_el_8j";


     std::string mtch = "Matching";
     std::string jes = "JES";
     std::string btag = "bTag";


   //Switch constraint terms from truncated Gaussian to lognormal
     meas.AddLogNormSyst(sc_mu_6j,0.2);
     meas.AddLogNormSyst(sc_mu_7j,0.2);
     meas.AddLogNormSyst(sc_mu_8j,0.2);
     meas.AddLogNormSyst(sc_el_6j,0.2);
     meas.AddLogNormSyst(sc_el_7j,0.2);
     meas.AddLogNormSyst(sc_el_8j,0.2);


     meas.AddLogNormSyst(mtch,0.02);
     meas.AddLogNormSyst(jes,0.1);
     meas.AddLogNormSyst(btag,0.04);




   // At this point, we have only given our channel
   // and measurement the input histograms as strings
   // We must now have the measurement open the files,
   // collect the histograms, copy and store them.
   // This step involves I/O 
   meas.CollectHistograms();

   // Print to the screen a text representation of the model
   // just for minor debugging
   meas.PrintTree();

   // Finally, run the measurement.
   // This is the same thing that happens when
   // one runs 'hist2workspace' on an xml files
   RooStats::HistFactory::MakeModelAndMeasurementFast(meas);
    
    
}
