#include "TFile.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TLegend.h"

void process(){
  TFile* f_El = new TFile("FourTopnoRho_EventSelection_El.root"); 
  TFile* f1 = new TFile("SystematicShapes_El.root"); 

  TFile* fnom = new TFile("NominalShapes_El.root","RECREATE"); 

  TH1F * hData_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_Data");
  TH1F * hSig_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_NP_overlay_TTTT");


  double sig_scale = 0.87*1.3;

  hSig_El->Scale(sig_scale);
  //  hSig_El->Scale();


  //signal injection test
  TH1F * hdata_100fbtttt;
  TH1F * hdata_150fbtttt;
  TH1F * hdata_200fbtttt;
  hdata_100fbtttt = (TH1F*)hData_El->Clone();
  hdata_150fbtttt = (TH1F*)hData_El->Clone();
  hdata_200fbtttt = (TH1F*)hData_El->Clone();

  hdata_100fbtttt->Add(hSig_El, 100/1.3);
  hdata_150fbtttt->Add(hSig_El, 150/1.3);
  hdata_200fbtttt->Add(hSig_El, 200/1.3);


  hdata_100fbtttt->SetMarkerColor(kBlue);
  hdata_150fbtttt->SetMarkerColor(kGreen);
  hdata_200fbtttt->SetMarkerColor(kRed);
  hSig_El->SetLineColor(kOrange);
  hSig_El->SetLineWidth(2); 
  hData_El->SetLineWidth(2);
  hData_El->SetTitle("");
  hData_El->SetMinimum(0.001);
  hData_El->SetMaximum(100000);

   TCanvas * cx = new TCanvas();
   hData_El->Draw("HIST");
   hSig_El->Draw("HISTSAME");
   hdata_100fbtttt->Draw("same");
   hdata_150fbtttt->Draw("same");
   hdata_200fbtttt->Draw("same");
   cx->SetLogy();
   cx->Update();

  TLegend* leg = new TLegend(0.6, 0.73, .97, .95);

  leg->SetFillColor(0);
  leg->AddEntry(hData_El, "Data", "l");
  leg->AddEntry(hdata_100fbtttt, "Data with signal injection (#sigma = 100 fb)", "p");
  leg->AddEntry(hdata_150fbtttt, "Data with signal injection (#sigma = 150 fb)", "p");
  leg->AddEntry(hdata_200fbtttt, "Data with signal injection (#sigma = 200 fb)", "p");
  leg->AddEntry(hSig_El, "Signal", "l");
  leg->Draw();
 
 cx->SaveAs("SignalInjection_El.pdf");


  TH1F * hTTll_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_TTJets_ll");
  TH1F * hTTcc_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_TTJets_cc");
  TH1F * hTTbb_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_TTJets_bb");
  TH1F * hTT_El = (TH1F*)hTTbb_El->Clone();
  hTT_El->Reset();
  hTT_El->Add(hTTll_El);
  hTT_El->Add(hTTcc_El);
  hTT_El->Add(hTTbb_El);

  double nExTT_El  = hTT_El->Integral() ;

  //  cout << hTTll_El->Integral() <<endl;
  //cout << hTTcc_El->Integral() <<endl;
  //cout << hTTbb_El->Integral() <<endl;
  //  cout << nExTT_El<<endl;

  //EW histo
  TH1F * hW4_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_W_4Jets");
  TH1F * hZ4_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_Z_4Jets");
  TH1F * hZ4_lm_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_Z_4Jets_lm");
  TH1F * hSingleTop_t_T_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_t_T");
  TH1F * hSingleTop_t_TBar_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_t_TBar");
  TH1F * hSingleTop_s_T_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_s_T");
  TH1F * hSingleTop_s_TBar_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_s_TBar");
  TH1F * hSingleTop_tW_T_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_tW_T");
  TH1F * hSingleTop_tW_TBar_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_SingleTop_tW_TBar");
  TH1F * hWW_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_WW");
  TH1F * hWZ_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_WZ");
  TH1F * hZZ_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_ZZ");

  TH1F * hEW_El = (TH1F*)hW4_El->Clone();
  hEW_El->Reset();

  hEW_El->Add(hW4_El);
  hEW_El->Add(hZ4_El);
  hEW_El->Add(hZ4_lm_El);
  hEW_El->Add(hSingleTop_t_T_El);
  hEW_El->Add(hSingleTop_t_TBar_El);
  hEW_El->Add(hSingleTop_s_T_El);
  hEW_El->Add(hSingleTop_s_TBar_El);
  hEW_El->Add(hSingleTop_tW_T_El);
  hEW_El->Add(hSingleTop_tW_TBar_El);
  hEW_El->Add(hWW_El);
  hEW_El->Add(hWZ_El);
  hEW_El->Add(hZZ_El);


  //tt other histo
  TH1F * httW_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_ttW");
  TH1F * httZ_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_ttZ");
  TH1F * httH_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_ttH");
  TH1F * hTTOther_El = (TH1F*)httW_El->Clone();
  hTTOther_El->Reset();

  hTTOther_El->Add(httW_El);
  hTTOther_El->Add(httZ_El);
  hTTOther_El->Add(httH_El);

 
  hTTOther_El->Write("ttOther");
  hEW_El->Write("EW");
  hTT_El->Write("tt");
  hSig_El->Write("tttt");
  hData_El->Write("data");

  hdata_100fbtttt->Write("data_w100fbtttt");
  hdata_150fbtttt->Write("data_w150fbtttt");
  hdata_200fbtttt->Write("data_w200fbtttt");




  //fnom->Write();
  fnom->Close();



  //  TH1F * hTT_Other_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_TTJets_Other");
  //TH1F * hEW_El = (TH1F*)f_El->Get("MultiSamplePlot_MVA/MVA_EW");




  TFile* f2 = new TFile("SystematicShapes_norm_El.root", "RECREATE");
 


  TH1F *h_Scale_Down = (TH1F*)f1->Get("Scale_Down");
  TH1F *h_Scale_Up = (TH1F*)f1->Get("Scale_Up");
  double s = nExTT_El/h_Scale_Up->Integral();
  h_Scale_Up->Scale(s);
  s = nExTT_El/h_Scale_Down->Integral();
  h_Scale_Down->Scale(s);
  h_Scale_Up->Write("Scale_Up");
  h_Scale_Down->Write("Scale_Down");



  TH1F *h_Matching_Down = (TH1F*)f1->Get("Matching_Down");
  TH1F *h_Matching_Up = (TH1F*)f1->Get("Matching_Up");
  s = nExTT_El/h_Matching_Up->Integral();
  h_Matching_Up->Scale(s);
  s = nExTT_El/h_Matching_Down->Integral();
  h_Matching_Down->Scale(s);
  h_Matching_Up->Write("Matching_Up");
  h_Matching_Down->Write("Matching_Down");


  TH1F *h_JES_Down = (TH1F*)f1->Get("JES_Down");
  TH1F *h_JES_Up = (TH1F*)f1->Get("JES_Up");
  s = nExTT_El/h_JES_Up->Integral();
  h_JES_Up->Scale(s);
  s = nExTT_El/h_JES_Down->Integral();
  h_JES_Down->Scale(s);
  h_JES_Up->Write("JES_Up");
  h_JES_Down->Write("JES_Down");



  TH1F *h_ttbb_Down = (TH1F*)f1->Get("ttbb_Down");
  TH1F *h_ttbb_Up = (TH1F*)f1->Get("ttbb_Up");
  s = nExTT_El/h_ttbb_Up->Integral();
  h_ttbb_Up->Scale(s);
  s = nExTT_El/h_ttbb_Down->Integral();
  h_ttbb_Down->Scale(s);
  h_ttbb_Up->Write("ttbb_Up");
  h_ttbb_Down->Write("ttbb_Down");


  TH1F *h_bTag_Down = (TH1F*)f1->Get("bTag_Down");
  TH1F *h_bTag_Up = (TH1F*)f1->Get("bTag_Up");
  s = nExTT_El/h_bTag_Up->Integral();
  h_bTag_Up->Scale(s);
  s = nExTT_El/h_bTag_Down->Integral();
  h_bTag_Down->Scale(s);
  h_bTag_Up->Write("bTag_Up");
  h_bTag_Down->Write("bTag_Down");


  TH1F *h_misTag_Down = (TH1F*)f1->Get("misTag_Down");
  TH1F *h_misTag_Up = (TH1F*)f1->Get("misTag_Up");
  s = nExTT_El/h_misTag_Up->Integral();
  h_misTag_Up->Scale(s);
  s = nExTT_El/h_misTag_Down->Integral();
  h_misTag_Down->Scale(s);
  h_misTag_Up->Write("misTag_Up");
  h_misTag_Down->Write("misTag_Down");


  TH1F *h_leptonSF_Down = (TH1F*)f1->Get("leptonSF_Down");
  TH1F *h_leptonSF_Up = (TH1F*)f1->Get("leptonSF_Up");
  s = nExTT_El/h_leptonSF_Up->Integral();
  h_leptonSF_Up->Scale(s);
  s = nExTT_El/h_leptonSF_Down->Integral();
  h_leptonSF_Down->Scale(s);
  h_leptonSF_Up->Write("leptonSF_Up");
  h_leptonSF_Down->Write("leptonSF_Down");




  TH1F *h_PU_Down = (TH1F*)f1->Get("PU_Down");
  TH1F *h_PU_Up = (TH1F*)f1->Get("PU_Up");
  s = nExTT_El/h_PU_Up->Integral();
  h_PU_Up->Scale(s);
  s = nExTT_El/h_PU_Down->Integral();
  h_PU_Down->Scale(s);
  h_PU_Up->Write("PU_Up");
  h_PU_Down->Write("PU_Down");



  TH1F *h_JER_Down = (TH1F*)f1->Get("JER_Down");
  TH1F *h_JER_Up = (TH1F*)f1->Get("JER_Up");
  s = nExTT_El/h_JER_Up->Integral();
  h_JER_Up->Scale(s);
  s = nExTT_El/h_JER_Down->Integral();
  h_JER_Down->Scale(s);
  h_JER_Up->Write("JER_Up");
  h_JER_Down->Write("JER_Down");




  //  f1->Close();



  f1->Close();
  f2->Write();
  f2->Close();


}
